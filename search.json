[{"path":[]},{"path":"https://mfansler.github.io/codonopt/articles/orf_sampling.html","id":"libraries","dir":"Articles","previous_headings":"Initialization","what":"Libraries","title":"Sampling ORFs of neonGreen","text":"","code":"library(codonopt) library(tidyverse) library(Biostrings)"},{"path":"https://mfansler.github.io/codonopt/articles/orf_sampling.html","id":"parameters","dir":"Articles","previous_headings":"Initialization","what":"Parameters","title":"Sampling ORFs of neonGreen","text":"","code":"set.seed(20230217) N_SAMPLES=1000  ## neonGreen seq_neonGreen_dna <- DNAString(\"atggtcagcaaaggcgaagaagacaacatggcatcactgccagcgacacacgaacttcatattttcggctccatcaatggtgtggacttcgatatggttggacagggtactgggaaccctaacgatggatatgaggagttgaacttgaagagtaccaagggcgatcttcagttttcaccttggattctcgtacctcatataggttatggctttcatcaatatctgccctatcctgacggtatgtcacctttccaagcagctatggttgacgggagcggttatcaggttcaccggacaatgcagtttgaagatggagcctctttgaccgtaaattatcggtatacttatgagggcagccatattaaaggcgaggctcaagttaaggggactgggttccccgcggatggtcccgtaatgacaaacagtctgacggctgcagactggtgccgctctaagaagacatatccaaatgacaagacgattattagcactttcaagtggtcatacactacaggaaatggtaaacgctataggagcactgcccggaccacgtatactttcgcgaagccgatggcggcaaattatttgaaaaaccaaccgatgtatgtgttcagaaagacagaactcaagcattctaaaactgaactgaacttcaaagagtggcagaaagcctttactgatgtaatgggcatggacgaactctataagtaa\")"},{"path":"https://mfansler.github.io/codonopt/articles/orf_sampling.html","id":"generate-samples","dir":"Articles","previous_headings":"","what":"Generate Samples","title":"Sampling ORFs of neonGreen","text":"","code":"df_orfs <- tibble(     seq=c(as.character(seq_neonGreen_dna), runiforf(seq_neonGreen_dna, size=N_SAMPLES)),     type=c(\"original\", rep(\"sample\", N_SAMPLES))) %>%          ## compute codon stability scores     mutate(frac_opt=map_dbl(seq, ~ score_fraction_optimal(as_codons(.x))),            mean_csc=map_dbl(seq, ~ score_mean_csc(as_codons(.x))),            frac_opt_orfome=map_dbl(seq, ~ score_fraction_optimal(as_codons(.x), csc_k562_orfome())),            mean_csc_orfome=map_dbl(seq, ~ score_mean_csc(as_codons(.x), csc_k562_orfome())),            frac_gc=letterFrequency(DNAStringSet(seq), \"GC\")/nchar(seq_neonGreen_dna))"},{"path":"https://mfansler.github.io/codonopt/articles/orf_sampling.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"Sampling ORFs of neonGreen","text":"","code":"df_orfs %>%     ggplot(aes(x=frac_gc, y=frac_opt)) +     geom_density2d(color=\"grey\") +     geom_point(aes(size=type, color=type), pch=16) +     scale_size_manual(values=c(\"original\"=5, \"sample\"=0.5), guide=guide_none()) +     scale_color_manual(values=c(\"original\"=\"green\", sample=\"darkgreen\"),                        guide=guide_none()) +     labs(x=\"Fraction GC\", y=\"Fraction Optimal Codons [K562_SLAM]\") +     theme_bw() df_orfs %>%     ggplot(aes(x=frac_gc, y=mean_csc)) +     geom_density2d(color=\"grey\") +     geom_jitter(aes(size=type, color=type), pch=16, width=0.0005, height=0) +     scale_size_manual(values=c(\"original\"=5, \"sample\"=0.5), guide=guide_none()) +     scale_color_manual(values=c(\"original\"=\"green\", sample=\"darkgreen\"),                        guide=guide_none()) +     labs(x=\"Fraction GC\", y=\"Mean CSC [K562_SLAM]\") +     theme_bw() df_orfs %>%     ggplot(aes(x=frac_opt, y=frac_opt_orfome)) +     geom_density2d(color=\"grey\") +     geom_point(aes(size=type, color=type), pch=16) +     scale_size_manual(values=c(\"original\"=5, \"sample\"=0.5), guide=guide_none()) +     scale_color_manual(values=c(\"original\"=\"green\", sample=\"darkgreen\"),                        guide=guide_none()) +     labs(x=\"Fraction Optimal Codons [K562_SLAM]\",           y=\"Fraction Optimal Codons [K562_ORFome]\") +     theme_bw() df_orfs %>%     ggplot(aes(x=mean_csc, y=mean_csc_orfome)) +     geom_abline(slope=1, linetype='dashed', color='grey') +     geom_hline(yintercept=0, linetype='dashed', color='grey40') +     geom_vline(xintercept=0, linetype='dashed', color='grey40') +     geom_density2d(color=\"grey\") +     geom_point(aes(size=type, color=type), pch=16) +     scale_size_manual(values=c(\"original\"=5, \"sample\"=0.5), guide=guide_none()) +     scale_color_manual(values=c(\"original\"=\"green\", sample=\"darkgreen\"),                        guide=guide_none()) +     labs(x=\"Mean CSC [K562_SLAM]\",           y=\"Mean CSC [K562_ORFome]\") +     theme_bw()"},{"path":"https://mfansler.github.io/codonopt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mervin Fansler. Author, maintainer.","code":""},{"path":"https://mfansler.github.io/codonopt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fansler M (2024). codonopt: Codon Optimality Tools. R package version 0.1.1, https://mfansler.github.io/codonopt/.","code":"@Manual{,   title = {codonopt: Codon Optimality Tools},   author = {Mervin Fansler},   year = {2024},   note = {R package version 0.1.1},   url = {https://mfansler.github.io/codonopt/}, }"},{"path":"https://mfansler.github.io/codonopt/index.html","id":"codonopt","dir":"","previous_headings":"","what":"Codon Optimality Tools","title":"Codon Optimality Tools","text":"codonopt package provides methods sampling possible codons amino acid sequence computing optimality scores open reading frame sequences.","code":""},{"path":"https://mfansler.github.io/codonopt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Codon Optimality Tools","text":"can install development version codonopt GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"mfansler/codonopt\")"},{"path":"https://mfansler.github.io/codonopt/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Codon Optimality Tools","text":"basic example shows compute simple optimality score.","code":"library(codonopt)  score_fraction_optimal(as_codons(\"AUGUUAGAUUUAUAG\")) #> [1] 0.5"},{"path":"https://mfansler.github.io/codonopt/reference/as_amino_acids.html","id":null,"dir":"Reference","previous_headings":"","what":"Amino Acid Conversion — as_amino_acids","title":"Amino Acid Conversion — as_amino_acids","text":"Method converting biological strings various formats amino acid sequence.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_amino_acids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Amino Acid Conversion — as_amino_acids","text":"","code":"as_amino_acids(sequence)  # S4 method for AAString as_amino_acids(sequence)  # S4 method for DNAString as_amino_acids(sequence)  # S4 method for RNAString as_amino_acids(sequence)"},{"path":"https://mfansler.github.io/codonopt/reference/as_amino_acids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Amino Acid Conversion — as_amino_acids","text":"sequence object representing amino acid sequence","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_amino_acids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Amino Acid Conversion — as_amino_acids","text":"character vector amino acids","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_amino_acids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Amino Acid Conversion — as_amino_acids","text":"converts sequence character vector amino acids. function vectorized. Supported input types DNAString, RNAString, character vector.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_amino_acids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Amino Acid Conversion — as_amino_acids","text":"","code":"orf <- Biostrings::AAString(\"MERVIN*\") as_amino_acids(orf) #> [1] \"M\" \"E\" \"R\" \"V\" \"I\" \"N\" \"*\"  orf <- Biostrings::DNAString(\"ATGAAATAG\") as_amino_acids(orf) #> [1] \"M\" \"K\" \"*\"   orf <- Biostrings::RNAString(\"AUGAAAUAG\") as_amino_acids(orf) #> [1] \"M\" \"K\" \"*\""},{"path":"https://mfansler.github.io/codonopt/reference/as_codons.html","id":null,"dir":"Reference","previous_headings":"","what":"Codon Conversion — as_codons","title":"Codon Conversion — as_codons","text":"Method converting DNA RNA strings various formats set codons.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_codons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codon Conversion — as_codons","text":"","code":"as_codons(sequence)  # S4 method for DNAString as_codons(sequence)  # S4 method for RNAString as_codons(sequence)  # S4 method for character as_codons(sequence)"},{"path":"https://mfansler.github.io/codonopt/reference/as_codons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codon Conversion — as_codons","text":"sequence object representing translatable sequence","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_codons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Codon Conversion — as_codons","text":"character vector DNA triplets","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_codons.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Codon Conversion — as_codons","text":"converts sequence character vector DNA triplets. function vectorized. Supported input types DNAString, RNAString, character vector.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/as_codons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Codon Conversion — as_codons","text":"","code":"orf <- Biostrings::DNAString(\"ATGAAATAG\") as_codons(orf) #> [1] \"ATG\" \"AAA\" \"TAG\"  rna <- Biostrings::RNAString(\"AUGAAAUAG\") as_codons(rna) #> [1] \"ATG\" \"AAA\" \"TAG\"  rna <- \"AUGAAAUAG\" as_codons(rna) #> [1] \"ATG\" \"AAA\" \"TAG\"  dna <- \"ATGAAATAG\" as_codons(dna) #> [1] \"ATG\" \"AAA\" \"TAG\""},{"path":"https://mfansler.github.io/codonopt/reference/codonopt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"codonopt: Codon Optimality Tools — codonopt-package","title":"codonopt: Codon Optimality Tools — codonopt-package","text":"Functions charactizing codon optimality.","code":""},{"path":[]},{"path":"https://mfansler.github.io/codonopt/reference/codonopt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"codonopt: Codon Optimality Tools — codonopt-package","text":"Maintainer: Mervin Fansler fanslerm@mskcc.org (ORCID)","code":""},{"path":"https://mfansler.github.io/codonopt/reference/csc_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Codon Stability Coefficients — csc_default","title":"Codon Stability Coefficients — csc_default","text":"Codon stability coefficients (CSCs) objects.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/csc_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codon Stability Coefficients — csc_default","text":"","code":"csc_default()  csc_hela_endo()  csc_k562_orfome()  csc_k562_slam()  csc_rpe_endo()  csc_x293t_endo()  csc_x293t_orfome()"},{"path":"https://mfansler.github.io/codonopt/reference/csc_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Codon Stability Coefficients — csc_default","text":"named numeric vector. names Codons (DNA triplets) values CSCs K562_ORFome","code":""},{"path":"https://mfansler.github.io/codonopt/reference/csc_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Codon Stability Coefficients — csc_default","text":"","code":"csc_default() #>         AAA         AAC         AAG         AAT         ACA         ACC  #> -0.07906900 -0.01422550  0.09540522 -0.06440400 -0.02791650  0.04424593  #>         ACG         ACT         AGA         AGC         AGG         AGT  #>  0.01108929 -0.12624130 -0.06878430 -0.09559080 -0.04549540 -0.14633200  #>         ATA         ATC         ATG         ATT         CAA         CAC  #> -0.03245480  0.13616115  0.11305209  0.02376783 -0.10703630 -0.11145590  #>         CAG         CAT         CCA         CCC         CCG         CCT  #> -0.01742640 -0.15979520 -0.05000270 -0.03780900 -0.04526170 -0.06096270  #>         CGA         CGC         CGG         CGT         CTA         CTC  #>  0.00875125  0.01422479  0.06893964  0.04548627  0.00337154  0.04979430  #>         CTG         CTT         GAA         GAC         GAG         GAT  #>  0.11508931 -0.03947050 -0.04615410  0.05094325  0.06121139  0.03671074  #>         GCA         GCC         GCG         GCT         GGA         GGC  #>  0.05492040  0.06784874  0.00557842  0.10245019  0.02588074  0.03644761  #>         GGG         GGT         GTA         GTC         GTG         GTT  #>  0.02619345  0.05504247 -0.01229950  0.10173224  0.12053024  0.01492908  #>         TAC         TAT         TCA         TCC         TCG         TCT  #>  0.05580312 -0.00685410 -0.13672100 -0.05952560 -0.05869680 -0.10389860  #>         TGC         TGG         TGT         TTA         TTC         TTG  #> -0.06542670  0.07779546 -0.16069410 -0.06283650  0.07996641  0.00168099  #>         TTT  #> -0.00146340  csc_k562_orfome() #>          AAA          AAC          AAG          AAT          ACA          ACC  #> -0.082503556  0.047233477  0.061907496 -0.093181619 -0.104350656  0.109884252  #>          ACG          ACT          AGA          AGC          AGG          AGT  #>  0.044688715 -0.077204782 -0.072122377  0.020764902 -0.025678032 -0.110262179  #>          ATA          ATC          ATG          ATT          CAA          CAC  #> -0.054457998  0.143272036  0.090953075 -0.073387738 -0.079564538 -0.025299086  #>          CAG          CAT          CCA          CCC          CCG          CCT  #> -0.027468588 -0.124496511 -0.058929710  0.048258297  0.017257001 -0.067048230  #>          CGA          CGC          CGG          CGT          CTA          CTC  #> -0.108887493  0.080312759 -0.018665000 -0.014334523 -0.049413500  0.142898557  #>          CTG          CTT          GAA          GAC          GAG          GAT  #>  0.133226227 -0.075467506 -0.109476543 -0.044443533 -0.004902221 -0.119047261  #>          GCA          GCC          GCG          GCT          GGA          GGC  #> -0.061083592  0.115365307  0.060036981 -0.009783583 -0.061659031  0.097437328  #>          GGG          GGT          GTA          GTC          GTG          GTT  #>  0.024264833 -0.013606956 -0.076093213  0.134421483  0.104936586 -0.063638071  #>          TAC          TAT          TCA          TCC          TCG          TCT  #>  0.089829145 -0.057669854 -0.095091552  0.058551808  0.013643145 -0.077415637  #>          TGC          TGG          TGT          TTA          TTC          TTG  #>  0.073893721  0.073165018 -0.047843750 -0.105342608  0.138368552 -0.070503663  #>          TTT  #> -0.066905273"},{"path":"https://mfansler.github.io/codonopt/reference/df_csc.html","id":null,"dir":"Reference","previous_headings":"","what":"Codon Stabilization Coefficients — df_csc","title":"Codon Stabilization Coefficients — df_csc","text":"Table codon stabilization coefficients (CSCs) reported https://doi.org/10.7554/eLife.45396.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/df_csc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codon Stabilization Coefficients — df_csc","text":"","code":"df_csc"},{"path":"https://mfansler.github.io/codonopt/reference/df_csc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Codon Stabilization Coefficients — df_csc","text":"data frame. codon Codons (DNA triplets) aa_code Amino acid 3-letter codes X293T_endo CSC X293T cells HeLa_endo CSC HeLa cells RPE_endo CSC RPE cells X293T_ORFome CSC X293T cells K562_ORFome CSC K562 cells K562_SLAM CSC K562 cells genome Codon counts genome transcriptome Codon counts weighted gene RPKM","code":""},{"path":"https://mfansler.github.io/codonopt/reference/df_csc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Codon Stabilization Coefficients — df_csc","text":"https://doi.org/10.7554/eLife.45396.006","code":""},{"path":"https://mfansler.github.io/codonopt/reference/dist_uniforf.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniform Open Reading Frame Distribution — runiforf","title":"Uniform Open Reading Frame Distribution — runiforf","text":"Implements uniform distribution possible open reading frames conditioned amino acid sequence open reading frame.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/dist_uniforf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniform Open Reading Frame Distribution — runiforf","text":"","code":"runiforf(sequence, size = 1)"},{"path":"https://mfansler.github.io/codonopt/reference/dist_uniforf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniform Open Reading Frame Distribution — runiforf","text":"sequence Biostrings::AAString translatable Biostrings::DNAString Biostrings::RNAString size integer number samples take","code":""},{"path":"https://mfansler.github.io/codonopt/reference/dist_uniforf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniform Open Reading Frame Distribution — runiforf","text":"character vector sampled open reading frames","code":""},{"path":"https://mfansler.github.io/codonopt/reference/dot-get_csc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific CSC data — .get_csc","title":"Extract specific CSC data — .get_csc","text":"Extract specific CSC data","code":""},{"path":"https://mfansler.github.io/codonopt/reference/dot-get_csc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific CSC data — .get_csc","text":"","code":".get_csc(assay = \"K562_SLAM\")"},{"path":"https://mfansler.github.io/codonopt/reference/dot-get_csc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific CSC data — .get_csc","text":"assay character experiment code","code":""},{"path":"https://mfansler.github.io/codonopt/reference/dot-get_csc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific CSC data — .get_csc","text":"named numeric vector.","code":""},{"path":[]},{"path":"https://mfansler.github.io/codonopt/reference/score_fraction_optimal.html","id":null,"dir":"Reference","previous_headings":"","what":"Score for Fraction of Optimal Codons — score_fraction_optimal","title":"Score for Fraction of Optimal Codons — score_fraction_optimal","text":"Computes fraction codons codon stability score greater zero.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/score_fraction_optimal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score for Fraction of Optimal Codons — score_fraction_optimal","text":"","code":"score_fraction_optimal(sequence, csc = csc_default())"},{"path":"https://mfansler.github.io/codonopt/reference/score_fraction_optimal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score for Fraction of Optimal Codons — score_fraction_optimal","text":"sequence character vector DNA triplets csc named numeric","code":""},{"path":"https://mfansler.github.io/codonopt/reference/score_fraction_optimal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score for Fraction of Optimal Codons — score_fraction_optimal","text":"numeric value [0,1]","code":""},{"path":"https://mfansler.github.io/codonopt/reference/score_fraction_optimal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score for Fraction of Optimal Codons — score_fraction_optimal","text":"","code":"codons <- c(\"ATG\", \"TTA\", \"GAT\", \"TTA\", \"TAG\") score_fraction_optimal(codons) #> [1] 0.5  score_fraction_optimal(as_codons(\"AUGUUAGAUUUAUAG\")) #> [1] 0.5"},{"path":"https://mfansler.github.io/codonopt/reference/score_mean_csc.html","id":null,"dir":"Reference","previous_headings":"","what":"Score for Mean Codon Stability Coefficient — score_mean_csc","title":"Score for Mean Codon Stability Coefficient — score_mean_csc","text":"Computes mean codon stability score sequence.","code":""},{"path":"https://mfansler.github.io/codonopt/reference/score_mean_csc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score for Mean Codon Stability Coefficient — score_mean_csc","text":"","code":"score_mean_csc(sequence, csc = csc_default())"},{"path":"https://mfansler.github.io/codonopt/reference/score_mean_csc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score for Mean Codon Stability Coefficient — score_mean_csc","text":"sequence character vector DNA triplets csc named numeric","code":""},{"path":"https://mfansler.github.io/codonopt/reference/score_mean_csc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score for Mean Codon Stability Coefficient — score_mean_csc","text":"numeric value [0,1]","code":""},{"path":"https://mfansler.github.io/codonopt/reference/score_mean_csc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score for Mean Codon Stability Coefficient — score_mean_csc","text":"","code":"codons <- c(\"ATG\", \"TTA\", \"GAT\", \"TTA\", \"TAG\") score_mean_csc(codons) #> [1] 0.006022457  score_mean_csc(as_codons(\"AUGUUAGAUUUAUAG\")) #> [1] 0.006022457"}]
